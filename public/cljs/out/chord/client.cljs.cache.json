["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$require",["^ "],"~$WebSocket",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$alt!","^8","~$go-loop","^8"],"~:excludes",["~#set",[]],"~:name","~$chord.client","~:imports",null,"~:requires",["^ ","~$a","~$cljs.core.async","^A","^A","~$chord.channels","^B","~$chord.format","^C"],"~:uses",["^ ","~$wrap-format","^C","~$<!","^A","~$close!","^A","~$chan","^A","~$write-to-ws!","^B","~$bidi-ch","^B","~$>!","^A","~$put!","^A","~$read-from-ws!","^B"],"~:defs",["^ ","~$close-event->maybe-error",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/reinvdwoerd/Documents/clojure-sandbox/public/cljs/out/chord/client.cljs","~:line",7,"~:column",7,"~:end-line",7,"~:end-column",31,"~:arglists",["~#list",["~$quote",["^X",[["~$ev"]]]]]],"^=","~$chord.client/close-event->maybe-error","~:variadic",false,"^R","public/cljs/out/chord/client.cljs","^V",31,"~:method-params",["^X",[["^Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^T",1,"^S",7,"^U",7,"~:max-fixed-arity",1,"~:fn-var",true,"^W",["^X",["^Y",["^X",[["^Z"]]]]]],"~$create-ws",["^ ","^P",null,"^Q",["^ ","^R","/home/reinvdwoerd/Documents/clojure-sandbox/public/cljs/out/chord/client.cljs","^S",12,"^T",8,"^U",12,"^V",17,"~:private",true,"^W",["^X",["^Y",["^X",[["~$url","~$opts"]]]]]],"^17",true,"^=","~$chord.client/create-ws","^10",false,"^R","public/cljs/out/chord/client.cljs","^V",17,"^11",["^X",[["^18","^19"]]],"^12",null,"^13",["^X",[null,null]],"^T",1,"^S",12,"^U",12,"^14",2,"^15",true,"^W",["^X",["^Y",["^X",[["^18","^19"]]]]]],"~$ws-ch",["^ ","^P",null,"^Q",["^ ","^R","/home/reinvdwoerd/Documents/clojure-sandbox/public/cljs/out/chord/client.cljs","^S",29,"^T",7,"^U",29,"^V",12,"^W",["^X",["^Y",["^X",[["~$ws-url","~$&",[["^ ","~:keys",["~$read-ch","~$write-ch","~$format","~$ws-opts"],"~:as","^19"]]]]]]],"~:doc","Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))","~:top-fn",["^ ","^10",true,"^14",1,"^11",[["^X",["^1<",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^W",["^X",[["^1<","~$&",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^13",["^X",[null]]]],"^=","~$chord.client/ws-ch","^10",true,"^R","public/cljs/out/chord/client.cljs","^V",12,"^1D",["^ ","^10",true,"^14",1,"^11",[["^X",["^1<",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^W",["^X",[["^1<","~$&",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^13",["^X",[null]]],"^11",[["^X",["^1<",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^12",null,"^13",["^X",[null]],"^T",1,"^S",29,"^U",29,"^14",1,"^15",true,"^W",["^X",[["^1<","~$&",[["^ ","^1=",["^1>","^1?","^1@","^1A"],"^1B","^19"]]]]],"^1C","Creates websockets connection and returns a 2-sided channel when the websocket is opened.\n   Arguments:\n    ws-url           - (required) link to websocket service\n    opts             - (optional) map to configure reading/writing channels\n      :read-ch       - (optional) (possibly buffered) channel to use for reading the websocket\n      :write-ch      - (optional) (possibly buffered) channel to use for writing to the websocket\n      :format        - (optional) data format to use on the channel, (at the moment)\n                                  either :edn (default), :json, :json-kw or :str.\n      :ws-opts       - (optional) Other options to be passed to the websocket constructor (NodeJS only)\n                                  see https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketaddress-protocols-options\n\n   Usage:\n    (:require [cljs.core.async :as a])\n\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\"))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))}))\n\n    (a/<! (ws-ch \"ws://127.0.0.1:6437\" {:read-ch (a/chan (a/sliding-buffer 10))\n                                          :write-ch (a/chan (a/dropping-buffer 10))}))"]],"~:require-macros",["^ ","^8","^8"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:write-ch","~:format","~:else","~:on-close","~:default","~:ws-opts","~:recur","~:ws-channel","~:reason","~:read-ch","~:code","~:error"]],"~:order",["^1Q","^1S","^1K","^1R","^1I","^1J","^1N","^1L","^1O","^1P","^1M","^1T"]],"^1C",null]